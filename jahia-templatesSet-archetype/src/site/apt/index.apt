Maven Archetype for Jahia Modules

  The Archetype Plugin allows the user to create a Maven project from an existing template called an archetype.

  It also allows the user to create an archetype from an existing project.

* Usage

  the goal archetype:generate creates the Maven structure for a Digital Factory module.

  Creating a project from an archetype involves four steps:

  ** the selection of the archetype,

  ** the configuration of that archetype,

  ** the effective creation of the project from the collected information.

  ** set the resource file
  
  []
  So you start with typing the following command in a command prompt:

+--
   mvn archetype:generate -DarchetypeCatalog=https://devtools.jahia.com/nexus/content/repositories/jahia-releases/archetype-catalog.xml
+--

  <<<-DarchetypeCatalog>>> defines the location of the catalog of available archetypes.


  [[1]] The selection of the archetype:

+--
Choose archetype:
1: https://... -> org.jahia.archetypes:jahia-migration-archetype (This is an archetype to generate a migration module)
2: https://... -> org.jahia.archetypes:jahia-module-archetype (Archetype for creating a new module project to be run on a Digital Factory server)
3: https://... -> org.jahia.archetypes:jahia-app-archetype (Archetype for creating a new JahiApp module project to be run on a Digital Factory server)
4: https://... -> org.jahia.archetypes:jahia-templatesSet-archetype (Archetype for creating a new template set project to be run on a Digital Factory server)
5: https://... -> org.jahia.archetypes:jahia-profileModule-archetype (Archetype for creating a new profile module project to be run on a Digital Factory server)
Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): :
+--

  To create a module for Digital Factory 7.0 or later, select the third choice.

  [[2]] The configuration of that archetype:

+--
  [INFO] Using property: groupId = org.jahia.modules
  [INFO] Using property: artifactId = sample
  [INFO] Using property: version = 1.0-SNAPSHOT
  [INFO] Using property: package = org.jahia.modules
  [INFO] Using property: jahiaPackageVersion = 7.0.0.0
  [INFO] Using property: moduleName = Sample Module
  Confirm properties configuration:
  groupId: org.jahia.modules
  artifactId: sample
  version: 1.0-SNAPSHOT
  package: org.jahia.modules
  jahiaPackageVersion: 7.0.0.0
  moduleName: Sample Module
   Y: : Y
+--

*--*--+
| moduleName | The Jahia name of the module
*--*--+
| jahiaPackageVersion | This is the Digital Factory version you are using (e.g. 7.0.0.0)
*--*--+
| artifactId | The Maven name of the the module (should be lowercase letters and no strange symbols)
*--*--+
| version\* | Leave it to 1.0-SNAPSHOT or set your own version
*--*--+
| groupId\* | The default is org.jahia.modules, you can modify it
*--*--+ 
| package\* | This is the default package name for your Java classes. If you have none you can leave the default.
*--*--+

  \*will only be asked if you do not confirm the settings
    
  You are asked for confirmation of the configuration, and after positive confirmation the project is created.

  [[3]] The effective creation of the project from the collected information:

  Here's the resulting tree of the created project
  
+--
  my-module
  |-- pom.xml
  |-- .gitignore
  `-- src
      |-- main
      |   |-- java
      |   `-- resources
      |       |-- META-INF
      |       |   |-- spring
      |       |   |   `-- sample.xml.disabled
      |       |   |-- definitions.cnd
      |       |   |-- rules.drl.disabled
      |       |   `-- sample.tld.disabled
      |       `-- resources
      |       |   `-- sample.properties     
      `-- site
          |-- apt
          |   `-- index.apt
          `-- site.xml
+--

*--+--+
| pom.xml | The Project Object Model XML file as required by Maven 2. Here you can add dependencies to other third party libraries required in your module. You can also fill in the missing settings in the \<manifestEntries\> section in order to have a proper MANIFEST.MF file created on Maven deployment.  
*--+--+
| src/main/java | The root folder of any Java source file. The folder structure underneath should match the package name of the Java class.
*--+--+
| src/main/resources/META-INF | In this directory you can place any custom taglibrary files, which can then be used in your JSPs. There is already a disabled example with a basic XML structure, which can be used for a start (enter a correct tag description and then remove the .disabled extension)   
*--+--+
| src/main/resources/META-INF/definitions.cnd | Content node definitions for the module
*--+--+
| src/main/resources/META-INF/rules.drl | Module rules
*--+--+
| src/main/resources/META-INF/spring | Spring XML files for creating configurations and beans. There is already a disabled example with a basic XML structure, which can be used for a start (enter a correct bean description and then remove the .disabled extension)
*--+--+
| src/main/resources/resources | Contains all resource bundles for the module
*--+--+
| src/site/site.xml | Maven site descriptor to describe the layout of the site 
*--+--+
| src/site/apt/index.apt | Default "Almost Plain Text" file to describe the usage of the new module.
*--+--+

